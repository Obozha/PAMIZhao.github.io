<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RIP和OSPF路由协议简单学习</title>
      <link href="/2021/02/14/rip-ospf/"/>
      <url>/2021/02/14/rip-ospf/</url>
      
        <content type="html"><![CDATA[<h2 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>RIP（Routing Information Protocol）是一种分布式的基于距离向的路由选择协议，适合小型互联网。</p><blockquote><p>关于距离<br>每经历一个路由器，跳数就加1</p></blockquote><ol><li>仅和相邻路由器交换信息。</li><li>交换的信息是当前本路由器知道的全部信息，即自己现在的路由表。</li><li>按固定的时间间隔交换信息。</li></ol><h3 id="距离向量算法"><a href="#距离向量算法" class="headerlink" title="距离向量算法"></a>距离向量算法</h3><p>设X结点是A到B的最短路径的一个结点，若把路径A-&gt;B拆成两段路径A-&gt;X和X-&gt;B，则每一段路径也都是最短路径。</p><p><img src="01.png" alt="RIP计算Demo"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点<ul><li>实现简单，开销小</li></ul></li><li>缺点<ul><li>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</li><li>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。 </li><li>“坏消息传播得慢”，使更新过程的收敛时间过长。</li></ul></li></ul><h2 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h2><h3 id="OSPF协议的基本特点"><a href="#OSPF协议的基本特点" class="headerlink" title="OSPF协议的基本特点"></a>OSPF协议的基本特点</h3><p>开放最短路径优先 OSPF (Open Shortest Path First)</p><ul><li><code>开放</code>表明 OSPF 协议不是受某一家厂商控制，而是公开发表的。</li><li><code>最短路径优先</code> 是因为使用了 Dijkstra 提出的最短路径算法 SPF</li><li>采用分布式的链路状态协议 (link state protocol)。 </li></ul><blockquote><p>注意：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p></blockquote><h3 id="OSPF的三个要点"><a href="#OSPF的三个要点" class="headerlink" title="OSPF的三个要点"></a>OSPF的三个要点</h3><ul><li>向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。</li><li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。<blockquote><p>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。 </p></blockquote></li><li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。  </li></ul><h3 id="链路数据库"><a href="#链路数据库" class="headerlink" title="链路数据库"></a>链路数据库</h3><ul><li>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。</li><li>这个数据库实际上就是全网的拓扑结构图，它在全网范围内是一致的（这称为链路状态数据库的同步）。</li><li>OSPF 的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。</li><li>OSPF 的更新过程收敛得快是其重要优点。</li></ul><h3 id="OSPF的区域"><a href="#OSPF的区域" class="headerlink" title="OSPF的区域"></a>OSPF的区域</h3><p>为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干个更小的范围，叫做区域。<br>每一个区域都有一个 32 位的区域标识符（用点分十进制表示）。<br>区域也不能太大，在一个区域内的路由器最好不超过 200 个。  </p><h3 id="原理形象解释"><a href="#原理形象解释" class="headerlink" title="原理形象解释"></a>原理形象解释</h3><pre class=" language-txt"><code class="language-txt">OSPF协议，类似车载导航系统，将每条道路都收集到自己的数据库里。当计算上海到北京的最短路径时，有以下选择：  （1）沈海高速—长深高速—荣乌高速—京沪高速  （2）京沪高速—滨莱高速—荣乌高速  （3）京沪高速—泰新高速—京台高速—廊沧高速第一条路径最短，优先选择。如果遇到中途“荣乌高速”严重堵车，可以提前切换到京沪高速，提高通行的效率。  OSPF比RIP强大的地方是，OSPF对整网的拓扑结构了如指掌，一旦某一条路径断了，可以及时选择备份链路，对通信的影响小。  RIP是基于谣言，对整网的拓扑结构没有概念，只知道有几个邻居，至于更远的邻居是什么样子，对不起，不知道！作者：车小胖链接：https://www.zhihu.com/question/62872429/answer/419024597来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x32dbg实战——深入追超级录像专家</title>
      <link href="/2021/01/26/x32dbgdeepfindcode/"/>
      <url>/2021/01/26/x32dbgdeepfindcode/</url>
      
        <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>x32dbg</li><li>IP Search</li><li>PEid</li></ul><a id="more"></a><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol><li>查壳</li></ol><p><img src="01.png" alt="01.png"></p><ol start="2"><li>拉进x32dbg，找注册失败后的字符串</li></ol><p><img src="02.png" alt="02.png"></p><p>错误提示</p><p><img src="03.png" alt="03.png"></p><p>找到错误提示的字符串位置，并且跳转</p><ol start="3"><li>找到关键call，并且开始断点调试</li></ol><p><img src="04.png" alt="04.png"></p><ol start="4"><li>断点调试后，发现关键call上边都没出现注册码，于是要单步进入关键call，看其内部调用</li></ol><p><img src="05.png" alt="05.png"></p><p>发现关键字符串 </p><pre><code>dword ptr [ebp-4]=[0018FB8C &amp;"Pict-1313ureRe-138C"]=01E47670 "Pict-1313ureRe-138C"</code></pre><ol start="5"><li>用注册码 “Pict-1313ureRe-138C” 测试下</li></ol><p><img src="06.png" alt="06.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时候通过单步跳过执行过程是看不到注册码的，需要进入call里边才能看到，并且此程序和IPSearch一样属于注册表注册，无法通过破坏验证来完成注册<br>在这个程序里边还发现了一点，程序是通过某种算法来算出注册码的，具有不一致性，可能一个机器生效的注册码换一个就失效了，这种需要生成注册机，破解算法。</p><p><img src="07.png" alt="07.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>鸣谢：吾爱技术吧</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x32dbg实战——追IPSearch注册码</title>
      <link href="/2021/01/26/crushsoftwarebase2/"/>
      <url>/2021/01/26/crushsoftwarebase2/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>x32dbg</li><li>IP Search</li><li>PEid</li></ul><a id="more"></a><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol><li>查壳</li></ol><p><img src="01.png" alt="01.png"></p><p>发现没壳，可以直接调试</p><ol start="2"><li>导入x32dbg分析</li></ol><p><img src="02.png" alt="02.png"></p><p>输入一个错误的注册码，点击注册，然后蹦出来错误提示框</p><p><img src="03.png" alt="03.png"></p><p>搜索该字符串</p><p><img src="04.png" alt="04.png"></p><p>双击跳转，并分析跳转后的结果</p><p><img src="05.png" alt="05.png"></p><p>在关键跳上边打上断点，开始测试程序</p><p><img src="06.png" alt="06.png"></p><p>找到注册码，并且尝试注册</p><p><img src="07.png" alt="07.png"></p><p>根据上图完成了注册</p><p>对于这个程序，如果跳过比较注册码的过程，直接跳转到正确结果的话，就算是注册成功，从新启动之后还是需要从新注册（因为程序是检测注册表来判断是否注册成功）</p><p><img src="08.png" alt="08.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调试的过程中，除了破坏验证时候跳转的判断，还有去追注册码<br>有些程序破坏验证是不可用的，需要具体问题具体分析。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x32dbg破解简单软件</title>
      <link href="/2021/01/23/crushsoftwarebase/"/>
      <url>/2021/01/23/crushsoftwarebase/</url>
      
        <content type="html"><![CDATA[<h1 id="x32dbg破解简单软件"><a href="#x32dbg破解简单软件" class="headerlink" title="x32dbg破解简单软件"></a>x32dbg破解简单软件</h1><blockquote><p>鸣谢：吾爱技术吧</p></blockquote><h2 id="前提需要知道的知识"><a href="#前提需要知道的知识" class="headerlink" title="前提需要知道的知识"></a>前提需要知道的知识</h2><h3 id="软件版本分类"><a href="#软件版本分类" class="headerlink" title="软件版本分类"></a>软件版本分类</h3><pre class=" language-txt"><code class="language-txt">一般分为以下几类： 【商业版】：也就是正规的商业发行版，这种软件本应通过正规购买方式获得，但网络上一些朋友将这些软件进行技术处理之后以软件包的形式提供下载，一般来说在使用上和正规购买的版本没有什么区别。 【试用版】：这类软件一般是商业软件开发商自己通过网络提供于大家下载的。但和正式商业版相比在功能上会有一定限制，比如原来在网络上提供的金山2003试用版。就有使用次数的限制。 【共享版】：也就是共享软件，这类软件一般是由个人开发完成，只通过网络下载的方式发行，但软件开发者为了获取利益，会对软件进行技术处理，在未向作者正式购买该软件之前会在使用过程中受到一定限制，如只能使用30天，或者某些高级功能无法使用。当使用者向作者付款之后，会通过比如注册码方式对软进行解锁，从而能够无障碍使用该软件。 【免费版】：和共享软件一样，大多由个人开发，但却是免费提供给大家使用，没有任何功能或时间、次数上的限制。但一般不允许对该软件进行二次开发或用于商业赢利目的。 【自由版】：也就是自由软件，这类软件不但向使用者提供没有任何限制的使用权限，而且遵循相关的自由软件授权协议允许任何人对该软件进行二次开发或用于商业用途，甚至有时会提供软件源代码（LINUX软件大多属于此类）。 【破解板】（注册版）：严格来说这不属于一种授权版本，因为他是针对商业版、试用版、共享版这类有使用限制的软件进行二次开发之后形成的特殊版本，也就是说，使用者可以在没有任何经济付出的条件下无限制的使用该软件的</code></pre><a id="more"></a><h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><ol><li>查壳<blockquote><p>PEID–功能强大的侦壳工具，自带脱壳插件（但是，效果不怎么样）<br>工作原理：核心是userdb.txt（大家看看就完全明白了）[通过壳的入口特征码进行辨认]</p></blockquote></li><li>od<blockquote><p>强大的反汇编工具，也是现在最常用的</p></blockquote></li><li>Dump<blockquote><p>OD自带的脱壳插件–到达OEP之后右键。。。<br>LordPE、PeDumper–选择所调试的进程–右键–完整脱壳</p></blockquote></li><li>修复<blockquote><p>Import REConstructor 1.6</p></blockquote></li><li>VMware<blockquote><p>虚拟机</p></blockquote></li></ol><h3 id="认识软件是否加密"><a href="#认识软件是否加密" class="headerlink" title="认识软件是否加密"></a>认识软件是否加密</h3><p>通过特征来判断</p><pre class=" language-txt"><code class="language-txt">----------------------------------------------------------------------------Microsoft Visual C++ 6.000496EB8 >/$  55            PUSH EBP                                 ;  (初始 cpu 选择)00496EB9  |.  8BEC          MOV EBP,ESP00496EBB  |.  6A FF         PUSH -100496EBD  |.  68 40375600   PUSH Screensh.0056374000496EC2  |.  68 8CC74900   PUSH Screensh.0049C78C                   ;  SE 处理程序安装00496EC7  |.  64:A1 0000000>MOV EAX,DWORD PTR FS:[0]00496ECD  |.  50            PUSH EAX00496ECE  |.  64:8925 00000>MOV DWORD PTR FS:[0],ESP00496ED5  |.  83EC 58       SUB ESP,58----------------------------------------------------------------------------Microsoft Visual Basic 5.0 / 6.000401166  - FF25 6C104000   JMP DWORD PTR DS:[<&MSVBVM60.#100>]      ; MSVBVM60.ThunRTMain0040116C >  68 147C4000     PUSH PACKME.00407C1400401171    E8 F0FFFFFF     CALL <JMP.&MSVBVM60.#100>00401176    0000            ADD BYTE PTR DS:[EAX],AL00401178    0000            ADD BYTE PTR DS:[EAX],AL0040117A    0000            ADD BYTE PTR DS:[EAX],AL0040117C    3000            XOR BYTE PTR DS:[EAX],AL----------------------------------------------------------------------------BC++0040163C > $ /EB 10         JMP SHORT BCLOCK.0040164E0040163E     |66            DB 66                                    ;  CHAR 'f'0040163F     |62            DB 62                                    ;  CHAR 'b'00401640     |3A            DB 3A                                    ;  CHAR ':'00401641     |43            DB 43                                    ;  CHAR 'C'00401642     |2B            DB 2B                                    ;  CHAR '+'00401643     |2B            DB 2B                                    ;  CHAR '+'00401644     |48            DB 48                                    ;  CHAR 'H'00401645     |4F            DB 4F                                    ;  CHAR 'O'00401646     |4F            DB 4F                                    ;  CHAR 'O'00401647     |4B            DB 4B                                    ;  CHAR 'K'00401648     |90            NOP00401649     |E9            DB E90040164A   . |98E04E00      DD OFFSET BCLOCK.___CPPdebugHook0040164E   > \A1 8BE04E00   MOV EAX,DWORD PTR DS:[4EE08B]00401653   .  C1E0 02       SHL EAX,200401656   .  A3 8FE04E00   MOV DWORD PTR DS:[4EE08F],EAX0040165B   .  52            PUSH EDX0040165C   .  6A 00         PUSH 0                                   ; /pModule = NULL0040165E   .  E8 DFBC0E00   CALL <JMP.&KERNEL32.GetModuleHandleA>    ; \GetModuleHandleA00401663   .  8BD0          MOV EDX,EAX----------------------------------------------------------------------------Borland Delphi 6.0 - 7.000509CB0 > $  55            PUSH EBP00509CB1   .  8BEC          MOV EBP,ESP00509CB3   .  83C4 EC       ADD ESP,-1400509CB6   .  53            PUSH EBX00509CB7   .  56            PUSH ESI00509CB8   .  57            PUSH EDI00509CB9   .  33C0          XOR EAX,EAX00509CBB   .  8945 EC       MOV DWORD PTR SS:[EBP-14],EAX00509CBE   .  B8 20975000   MOV EAX,unpack.0050972000509CC3   .  E8 84CCEFFF   CALL unpack.0040694C----------------------------------------------------------------------------易语言入口00401000 >  E8 06000000     call dump_.0040100B00401005    50              push eax00401006    E8 BB010000     call <jmp.&KERNEL32.ExitProcess>0040100B    55              push ebp0040100C    8BEC            mov ebp,esp0040100E    81C4 F0FEFFFF   add esp,-11000401014    E9 83000000     jmp dump_.0040109C00401019    6B72 6E 6C      imul esi,dword ptr ds:[edx+6E],6C0040101D    6E              outs dx,byte ptr es:[edi]也可能是这样的入口Microsoft Visual C++ 6.0 [Overlay] E语言00403831 >/$  55            PUSH EBP00403832  |.  8BEC          MOV EBP,ESP00403834  |.  6A FF         PUSH -100403836  |.  68 F0624000   PUSH Nisy521.004062F00040383B  |.  68 A44C4000   PUSH Nisy521.00404CA4                    ;  SE 处理程序安装00403840  |.  64:A1 0000000>MOV EAX,DWORD PTR FS:[0]00403846  |.  50            PUSH EAX00403847  |.  64:8925 00000>MOV DWORD PTR FS:[0],ESP----------------------------------------------------------------------------MASM32 / TASM32入口00401258 >/$  6A 00         push 0                                   ; /pModule = NULL0040125A  |.  E8 47000000   call <jmp.&kernel32.GetModuleHandleA>    ; \GetModuleHandleA0040125F  |.  A3 00304000   mov dword ptr ds:[403000],eax00401264  |.  6A 00         push 0                                   ; /lParam = NULL00401266  |.  68 DF104000   push dump.004010DF                       ; |DlgProc = dump.004010DF0040126B  |.  6A 00         push 0                                   ; |hOwner = NULL0040126D  |.  6A 65         push 65                                  ; |pTemplate = 650040126F  |.  FF35 00304000 push dword ptr ds:[403000]               ; |hInst = NULL00401275  |.  E8 56000000   call <jmp.&user32.DialogBoxPar----------------------------------------------------------------------------MASM32 / TASM32入口00401258 >/$  6A 00         push 0                                   ; /pModule = NULL0040125A  |.  E8 47000000   call <jmp.&kernel32.GetModuleHandleA>    ; \GetModuleHandleA0040125F  |.  A3 00304000   mov dword ptr ds:[403000],eax00401264  |.  6A 00         push 0                                   ; /lParam = NULL00401266  |.  68 DF104000   push dump.004010DF                       ; |DlgProc = dump.004010DF0040126B  |.  6A 00         push 0                                   ; |hOwner = NULL0040126D  |.  6A 65         push 65                                  ; |pTemplate = 650040126F  |.  FF35 00304000 push dword ptr ds:[403000]               ; |hInst = NULL00401275  |.  E8 56000000   call <jmp.&user32.DialogBoxPar</code></pre><h3 id="汇编简单基础"><a href="#汇编简单基础" class="headerlink" title="汇编简单基础"></a>汇编简单基础</h3><pre class=" language-txt"><code class="language-txt">cmp    a,b     //  比较a与bmov    a,b     //  把b值送给a值，使a=bret            //  返回主程序nop            //  无作用call           //  调用子程序，子程序以ret结尾je或jz         //  相等则跳（机器码是74或84）jne或jnz       //  不相等则跳（机器码是75或85）jmp            //  无条件跳（机器码是EB）jb             //  若小于则跳ja             //  若大于则跳jg             //  若大于则跳jge            //  若大于等于则跳jl             //  若小于则跳pop xxx        //  xxx出栈push xxx       //  xxx压栈// ...</code></pre><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>破解第一个简单程序</p><p><img src="01.png" alt="01.png"></p><p>注册码输入正确就显示以下跳转</p><p><img src="02.png" alt="02.png"></p><p>错误则报错</p><p><img src="05.png" alt="05.png"></p><ol><li>拖拽<code>.exe</code>到PEid查壳</li></ol><p><img src="03.png" alt="03.png"></p><p>发现此程序没有壳，是易语言通过vc++最后编译出来的程序，带着vc++的特征码</p><ol start="2"><li>拖拽<code>.exe</code>到x32dbg，并搜索字符串</li></ol><p><img src="04.png" alt="04.png"></p><ol start="3"><li>在字符串界面找到提示的字符，双击跳转查看执行过程。或者直接找到注册码，完成破解</li></ol><p><img src="06.png" alt="06.png"></p><ol start="4"><li>分析程序，找到关键call（注册成功和失败的调用），关键call上边的地方有关键跳</li></ol><p><img src="07.png" alt="07.png"></p><ol start="5"><li>将此处的逻辑用<code>NOP</code>填充或者<code>je</code>改为<code>jne</code>（破坏跳转逻辑，使跳转不成立）,进而输入错误的注册码也可以执行</li></ol><p><img src="08.png" alt="08.png"></p><ol start="6"><li>通过debug的方式看程序是否在这个地方直接执行注册，不进行跳转（此处不再演示）</li><li>通过打补丁的方式，将补丁打给此程序的一个副本，实现破解</li></ol><p><img src="09.png" alt="09.png"></p><ol start="8"><li>测试破解是否成功</li></ol><p><img src="10.png" alt="10.png"></p><p>通过错误的注册码进入了正确的成功界面，破坏了判断错误后的跳转，直接进入正确的跳转，破解成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>破解步骤</p><ul><li>查壳破壳</li><li>拉入程序到x32dbg</li><li>通过程序特征（字符串、事件等）去找关键call，进而找到关键跳，破坏验证的关键跳 | 或者找到注册码</li><li>如果破坏了关键跳，记得给程序打上补丁，完成破解</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的STL容器</title>
      <link href="/2021/01/16/c-stlinstruction/"/>
      <url>/2021/01/16/c-stlinstruction/</url>
      
        <content type="html"><![CDATA[<h1 id="算法设计工具STL"><a href="#算法设计工具STL" class="headerlink" title="算法设计工具STL"></a>算法设计工具STL</h1><h2 id="STL概述"><a href="#STL概述" class="headerlink" title="STL概述"></a>STL概述</h2><h3 id="STL组成成分"><a href="#STL组成成分" class="headerlink" title="STL组成成分"></a>STL组成成分</h3><p>STL主要由</p><ul><li>container - 容器</li><li>algorithm - 算法</li><li>iterator - 迭代器</li></ul><p>三大件组成</p><a id="more"></a><h3 id="什么是STL容器"><a href="#什么是STL容器" class="headerlink" title="什么是STL容器"></a>什么是STL容器</h3><p>简单说STL容器就是一种数据结构</p><pre class=" language-txt"><code class="language-txt">注意：C++引入了命名空间概念，在不同命名空间中可以存在相同名字的标识符。</code></pre><pre class=" language-c"><code class="language-c">using namespace std<span class="token punctuation">;</span></code></pre><ul><li>常用的数据结构和相应头文件</li></ul><table><thead><tr><th>数据结构</th><th>说明</th><th>头文件</th></tr></thead><tbody><tr><td>vector</td><td>底层是数组，支持随机访问</td><td>&lt;vector&gt;</td></tr><tr><td>string</td><td>字符处理容器</td><td>&lt;string&gt;</td></tr><tr><td>deque</td><td>双端队列</td><td>&lt;deque&gt;</td></tr><tr><td>list</td><td>链表，底层为双向链表</td><td>&lt;list&gt;</td></tr><tr><td>stack</td><td>栈</td><td>&lt;stack&gt;</td></tr><tr><td>queue</td><td>队列</td><td>&lt;queue&gt;</td></tr><tr><td>priority-queue</td><td>优先队列</td><td>&lt;queue&gt;</td></tr><tr><td>set/multiset</td><td>结点组成的红黑树</td><td>&lt;set&gt;</td></tr><tr><td>map/mutimap</td><td>key-value结构，底层红黑树</td><td>&lt;map&gt;</td></tr></tbody></table><h3 id="什么是STL算法"><a href="#什么是STL算法" class="headerlink" title="什么是STL算法"></a>什么是STL算法</h3><p>STL算法是用来操作容器中数据的模板函数，大概100个算法模板函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">testSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="什么是STL迭代器"><a href="#什么是STL迭代器" class="headerlink" title="什么是STL迭代器"></a>什么是STL迭代器</h3><p>简单地说，STL迭代器用于访问容器中数据对象。</p><p>常用迭代器</p><ul><li>iterator - 指向容器中存放元素的迭代器，用于正向遍历容器中的元素</li><li>const_iterator - 指向容器中存放元素的常量迭代器，只能读取容器11中的元素</li><li>reverse_iterator - 指向容器中存放元素的反响迭代器，用于反向遍历容器中的元素</li><li>const_reverse_iterator - 常量反向迭代器</li></ul><p>迭代器常用操作：</p><ul><li>++ 正向移动迭代器</li><li>– 反向移动迭代器</li><li>* 返回迭代器值</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">testFrontIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> myv<span class="token punctuation">;</span>    myv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator it<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>myv<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>myv<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">testBackIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> myv<span class="token punctuation">;</span>    myv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>reverse_iterator rit<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>rit<span class="token operator">=</span>myv<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rit<span class="token operator">!=</span>myv<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>rit<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>rit<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="常用的STL容器"><a href="#常用的STL容器" class="headerlink" title="常用的STL容器"></a>常用的STL容器</h2><h3 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h3><h4 id="vector-向量容器"><a href="#vector-向量容器" class="headerlink" title="vector 向量容器"></a>vector 向量容器</h4><p>它是一个向量类模版。向量容器相当于数组，操作起来和数组的优缺点一样</p><p>定义方式</p><pre class=" language-c"><code class="language-c">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义元素为int的向量v1</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 指向向量v2的初始大小为10个int元素</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向v3的10个初始元素的初值为1.23</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 用数组a 0～4共5个元素初始化v4</span></code></pre><p>vector提供了一系列的成员函数</p><pre class=" language-txt"><code class="language-txt">- empty()               判断当前向量是否为空- size()                返回当前容量中实际元素个数- []                    返回指定下标元素- reserve(n)            为当前向量容器预分配n个元素的存储空间- capacity()            返回当前向量容器在重新进行内存分配以前所能容纳的个数- resize(n)             调整当前容量容器大小，使其能容纳n个元素- push_back()           在当前向量容器尾部添加一个元素- insert(pos,elem)      在pos位置插入元素elem，即将元素elem插入迭代器pos指向位置之前- front()               获取当前向量容器的第一个元素- back()                获取当前向量容器的最后一个元素- erase()               删除当前向量向量容器中某个迭代器或者迭代器区间指定的元素- clear()               删除当前想向量容器中的所有元素- begin()               该函数的两个版本返回iterator或const_iterator，引用容器第一个元素- end()                 该函数的两个版本返回... ,引用容器的最后一个位置- rbegin()              该函数的两个版本返回reverse_iterator或const_reverse_iterator，引用容器的最后一个元素- rend()                与rbegin反过来</code></pre><p>关于size和capacity区别</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>using std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"v.size() == "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" v.capacity() = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"v.size() == "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" v.capacity() = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"v.size() == "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" v.capacity() = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行结果</p><p><img src="1.png" alt="01.jpg"></p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>string是一个保存字符序列的容器，类似于vector&lt;char&gt;</p><p>定义方式</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> cstr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"China!Greate Wall"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串</span>string <span class="token function">s1</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// s1 "China! Greate Wall"</span>string <span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// s2 "China! Greate Wall"</span>string <span class="token function">s3</span><span class="token punctuation">(</span>cstr<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// s3 "Greate Wall"</span>string <span class="token function">s4</span><span class="token punctuation">(</span>cstr<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// s4 "China"</span>string <span class="token function">s5</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// s5 "AAAAA"</span></code></pre><p>操作方式</p><pre class=" language-txt"><code class="language-txt">empty()                                                  判断当前字符串是否为空串size()                                                   返回当前字符串实际字符个数（返回结果为size_type类型）length()                                                 返回当前字符串实际字符个数[idx]                                                    返回当前字符串位于idx位置的字符，idx从0开始at(idx)                                                  返回当前字符串位于idx位置的字符compare(const string& str)                               返回当前字符串与字符串str的比较结果。相等是0，前者小于后者返回-1，否则返回1append(cstr)                                             在当前字符串的末尾添加一个字符串strinsert(size_type idx,const string& str)                  在当前字符串的idx处插入一个字符串strfind(string& s,size_type pos)                            从当前字符串中的pos位置开始查找字符串s的第一个位置，找到返回其位置，若没有找到返回-1replace(size_type idx,size_type len,const string& str)   将当前字符串中起始于idx的len个字符用一个字符串str替换substr(size_type idx)                                    返回当前字符串起始于idx的子串             substr(size_type idx,size_type len)                      返回当前字符串起始于idx的长度为len的子串clear()                                                  删除当前字符串中的所有字符erase()                                                  删除当前字符串中的所有字符erase(size_type idx)                                     删除当前字符串换从idx开始的所有字符erase(size_type idx,size_type len)                       删除当前字符串从idx开始的len个字符</code></pre><p>实例</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">testString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s1<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span>s3<span class="token operator">=</span><span class="token string">"Bye"</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Good morning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s2<span class="token operator">=</span>s1<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>s2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"morning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">,</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于s2.replace(5,7,s3);</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"s1:"</span><span class="token operator">&lt;&lt;</span>s1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"s2:"</span><span class="token operator">&lt;&lt;</span>s2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="deque-双端队列容器"><a href="#deque-双端队列容器" class="headerlink" title="deque 双端队列容器"></a>deque 双端队列容器</h4><p>双端队列容器由若干个块构成，每个块中元素的地址是连续的，块之间的地址是不连续的</p><p>定义方式</p><pre class=" language-c"><code class="language-c">deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dq1<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 指定元素为int的双端队列dq1</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dq2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 指定dq2的初始大小为10个int元素</span>deque<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dq3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 指定dq3的10个初始元素为1.23</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dq4</span><span class="token punctuation">(</span>dq2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dq2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用dq2的所有元素初始化dq4</span></code></pre><p>主要函数</p><pre class=" language-txt"><code class="language-txt">empty()size()front()back()push_front(elem)push_back(elem)pop_front()pop_back()erase()clear()begin()end()rbegin()rend()</code></pre><p>实例</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">disp</span><span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>dq<span class="token punctuation">)</span><span class="token punctuation">{</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator iter<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>dq<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>dq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">testDeque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dq<span class="token punctuation">;</span>    dq<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dq<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"dq:"</span><span class="token punctuation">;</span>    <span class="token function">disp</span><span class="token punctuation">(</span>dq<span class="token punctuation">)</span><span class="token punctuation">;</span>    dq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dq<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp</span><span class="token punctuation">(</span>dq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="list-链表"><a href="#list-链表" class="headerlink" title="list 链表"></a>list 链表</h4><p>实际是一个双向链表</p><p>定义方式</p><pre class=" language-c"><code class="language-c">list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l1<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 定义元素为int的链表l1</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">l2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 指定链表l2的初始大小为10个int 元素</span>list<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">l3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指定l3的10个初始大小的初值1.23</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">l4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用数组a[0..4]共5个元素初始化14</span></code></pre><p>主要操作</p><pre class=" language-c"><code class="language-c"><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">remove_if</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>elem<span class="token punctuation">)</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>elem<span class="token punctuation">)</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>pos1<span class="token punctuation">,</span>pos2<span class="token punctuation">)</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>示例</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">disp_list</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>lst<span class="token punctuation">)</span><span class="token punctuation">{</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>lst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>lst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">testList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lst<span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"初始lst"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">disp_list</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">;</span>    it<span class="token operator">=</span>lst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    start<span class="token operator">=</span><span class="token operator">++</span>lst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end<span class="token operator">=</span><span class="token operator">--</span>lst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">=</span>lst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// lst.end(); 在最后位置+1</span>    lst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// start在2的位置，end在3的位置，it在5的位置</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"执行后lst.insert(it,start,end);"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">disp_list</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示将 2 4 1 插入到5前边</span><span class="token punctuation">}</span></code></pre><h3 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h3><p>关联容器中的每个元素都有一个key（关键字），通过key来存储和读取元素，这些关键字可能与元素所在容器的位置无关，所以关联容器不提供顺序容器中的front()、push_front()、back()、push_back()、以及pop_back()等操作</p><h4 id="set-multiset-集合容器-多重集合容器"><a href="#set-multiset-集合容器-多重集合容器" class="headerlink" title="set/multiset 集合容器/多重集合容器"></a>set/multiset 集合容器/多重集合容器</h4><h4 id="map-multimap-映射容器-多重映射容器"><a href="#map-multimap-映射容器-多重映射容器" class="headerlink" title="map/multimap 映射容器/多重映射容器"></a>map/multimap 映射容器/多重映射容器</h4><h3 id="适配器容器"><a href="#适配器容器" class="headerlink" title="适配器容器"></a>适配器容器</h3><h4 id="stack-栈容器"><a href="#stack-栈容器" class="headerlink" title="stack 栈容器"></a>stack 栈容器</h4><p>默认底层是deque，用户也可以指定其他底层容器</p><p>定义</p><pre class=" language-c"><code class="language-c">stack<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> myst<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第二个参数指定底层容器为vector</span></code></pre><p>操作</p><blockquote><p>栈只有一个出口，所以没有迭代器操作</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>例子</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">testStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"栈顶元素:"</span><span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"出栈顺序"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="queue-队列容器"><a href="#queue-队列容器" class="headerlink" title="queue 队列容器"></a>queue 队列容器</h4><p>定义与stack相似</p><blockquote><p>queue容器不允许顺序遍历，没有迭代器操作</p></blockquote><p>操作</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>例子</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">testQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> qu<span class="token punctuation">;</span>    qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"队头元素:"</span><span class="token operator">&lt;&lt;</span>qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"队尾元素:"</span><span class="token operator">&lt;&lt;</span>qu<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"出队元素"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="priority-queue-优先队列"><a href="#priority-queue-优先队列" class="headerlink" title="priority_queue 优先队列"></a>priority_queue 优先队列</h4><p>内置函数，需要重新定义优先运算符</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>STL<ul><li>STL概述 - 三大件 容器 算法 迭代器<ul><li>什么是STL容器</li><li>什么是STL算法</li><li>什么是STL迭代器</li></ul></li><li>常用STL容器<ul><li>顺序容器<ul><li>vector !</li><li>string !</li><li>deque</li><li>list !</li></ul></li><li>关联容器<ul><li>set</li><li>map </li></ul></li><li>适配器容器<ul><li>stack !</li><li>queue !</li><li>priority_queue</li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月16日日记-2010英语卷</title>
      <link href="/2020/07/16/2020716/"/>
      <url>/2020/07/16/2020716/</url>
      
        <content type="html"><![CDATA[<p>今天开始锻炼了！希望未来能够每天坚持，让自己拥有一个好的身体。  </p><p>线代的学习也加快步伐了  </p><a id="more"></a><h2 id="英语摘抄"><a href="#英语摘抄" class="headerlink" title="英语摘抄"></a>英语摘抄</h2><p>But the epidemic is “moderate” in severity, according to Margaret Chan, the organization’s directior general, with the overwhelming majority of patients experiencing only symptoms and a full recovery, often in the absense of any medical treatment.</p><blockquote><p>但根据世界卫生组织总干事陈冯富珍称，此次传染病的严重程度“中等”，绝大多数患者只有轻微症状，通常不用借助任何治疗能够完全康复。</p></blockquote><p>The heightened alert followed an emergency meeting with flu experts in Geneva that assembled after a sharp rise in cases in Australia，and rising numbers in Britain, Japan, Chile and elsewhere.</p><blockquote><p>随着澳大利亚病例的急剧增多，以及英国、日本、智利和其他地区感染人数的不断上升，流感专家们在日内瓦召开了紧急会议，随后警惕升级了。</p></blockquote><p>More than three million doses were to be made available in early October 2009, though most of those inital doses were of the FluMist nasal spray type,which is not recommended for pregnant women, people over 50 or those with breathing difficulties, heart disease or several other problems.</p><blockquote><p>2009年10月初，有三百多万剂投入使用，尽管这批初期药剂中的大部分为FluMist鼻用喷雾剂型疫苗，是不建议孕妇、50岁以上或有呼吸困难、心脏疾病或一些其他疾病的人群使用的。</p></blockquote><p>But the market generates interest far beyond its size because it brings together great wealth, enormous egos, greed, passion and controversy in a way matched by few other industries.</p><blockquote><p>但这一市场产生的利益远远超出它本身的规模，因为它将大量财富、膨胀的自我、贪婪、激情和争议以一种其他行业无法比拟的方式汇集在了一起。</p></blockquote><p>This episode crystallizes the irony that although American men tend to talk more than women in public situations, they often talk less at home.</p><blockquote><p>这段情节证明了一种具有讽刺意味的现象的确存在；尽管美国男性倾向于在公共场合比女性健谈，在家里却比妻子话少。</p></blockquote><p>In short，the image that best represents the current crisis is the stereotypical cartoon scene of a man sitting at the breakfast table with a newspaper held up in front of his face, while a woman glares at the back of it,wanting to talk.</p><blockquote><p>简言之，最能形象表现目前这种危机的是这样的经典漫画场景：一个男人坐在早餐桌边，手中报纸挡住他的脸，一个女人怒视报纸背面，很想交谈。</p></blockquote><p>The companies that Dr.Curtis turned to —— P&amp;G, C-P and U —— had invested hundreds of millions of dollars finding the subtle cues in consumers’lives that corporations could use to introduce new routines.</p><blockquote><p>柯提斯博士求助的公司有宝洁、高露洁和联合利华，这些公司曾经投资几亿美元用于发觉消费者生活中的微妙暗示，并利用它们引入新惯例。</p></blockquote><p>Today, beacause of shrewd advertising and public health campaigns, many Americans habitually give their pearly whites a cavity-preventing scrub twice a day, often with Colgate, Crest or one of the other brands.</p><blockquote><p>而今天，受精明的广告活动和公共卫生运动的影响，许多美国人会习惯性地每天给他们那如珍珠般洁白的牙齿做两次龋齿预防刷洗，他们使用的，往往就是高露洁、佳洁士或者其他某种品牌。</p></blockquote><p>Although the Supreme Court of the United States had prohibited intentional racial discrimination in jury selection as early as the 1880 case of SWV, the practice of selecting so-called elite or blue-ribbon juries provided a convenient way around this and other antidiscrimination laws.</p><blockquote><p>尽管美国最高法院早在1880年的SWV一案中就已经禁止了陪审团遴选中的蓄意种族歧视，但挑选所谓的精英陪审员或者蓝带陪审员的做法，却为绕开这一反歧视及其他反歧视提供了一条捷径。</p></blockquote><p>In the landmark 1975 decision T, the Supreme Court extended the requirement that juries be representative of all parts of the community to the state level.</p><blockquote><p>在1975年泰勒诉路易安那州一案里程碑式的裁定中，最高法院将陪审团成员需代表社会各阶层这一要求延伸至州级层面。</p></blockquote><p>Many Americans regard the jury system as a concrete expression of crucial democratic values, including the principles that all citizens who meet minimal qualifications of age and literacy are equally competent to serve on juries; that jurors should be selected randomly from a  representative cross section of the community; that no citizen should be denied the right to serve on a jury on account of race, religion, sex, or national origin; that defendants are entitled to trial by their peers; and that verdicts should represent the conscience of community and not just the letter of the law.</p><blockquote><p>许多美国人把陪审团制度看作是关键民主价值观的具体表现，该制度包括以下原则；所有满足最低年龄和文化要求的公民都具备同等资格担任陪审员；陪审员应从社会各部门的典型代表中随机挑选；任何公民不得由种族、宗教、性别和民族出身被剥夺担任陪审员的权利；被告人有权利接收由同等地位人的审判；审判结果应该代表社会良知，而不仅仅是法律条文的字面意义。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo自动化工具</title>
      <link href="/2020/06/27/autohexomaker/"/>
      <url>/2020/06/27/autohexomaker/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo自动化工具"><a href="#hexo自动化工具" class="headerlink" title="hexo自动化工具"></a>hexo自动化工具</h2><p>为解决hexo每次写文章都需要输一堆命令，写文章的时候需要手动创建以及添加配置，以及gitee更新还需要登录账号这好多步骤的操作，于是想要把所有的操作集中到一个GUI的工具执行</p><a id="more"></a><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>首先需要安装node.js，Git，并且将node.js Git都已经配置到环境变量（安装包的时候默认添加）</li><li>然后配置VisialCode到环境变量，因为要执行创建文章的时候顺带也打开了，打开的工具使用的是VisualCode</li><li>在hexo博客所在目录位置<code>_config.yml</code>文件中的<code>deploy</code>项，设置好<code>repo</code>。</li><li>在gitee设置好自己的私人令牌，拿到token填写到程序中。</li></ol><h3 id="软件操作"><a href="#软件操作" class="headerlink" title="软件操作"></a>软件操作</h3><ul><li><p>首先选择博客所安放的目录<br><img src="01.png" alt="02"></p></li><li><p>接着开始调试、写文章、改博客代码等操作。</p></li></ul><p>调试<br><img src="02.gif" alt="02"></p><p>写文章</p><p><img src="03.gif" alt="03"></p><ul><li>做完所有修改博客的行为之后就是<code>打包--&gt;部署--&gt;更新</code> 一条龙服务！最后访问自己的域名便可。</li></ul><blockquote><p>※打包就是把所有博客文件生成一堆静态文件，意义是gitee或者github不用再下载npm的一堆依赖了。<br>※部署就是把打包后的静态文件，部署到gitee pages或者github pages<br>※更新专门针对的是gitee，gitee需要手动更新gitee pages，这里需要用户自己的令牌token来完成更新api的操作。</p></blockquote><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>唯一让我调试了多次主要还是访问远程api</p><pre class=" language-java"><code class="language-java">HTTP http <span class="token operator">=</span> HTTP<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpCall post <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/repos/bigzcoder/bigzcoder/pages/builds"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setOnResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HttpResult result<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addBodyParam</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">,</span> <span class="token string">"****d9229103dd92ad95**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>新建文章主要是用了IO操作，把文章的文件以及文件夹写到<code>sources/_post</code>里边</p><pre class=" language-java"><code class="language-java">fileDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SimpleDateFormat formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建文件输出流</span>bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用缓冲区数据流封装输出流</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"title: "</span> <span class="token operator">+</span> PostConfigSetView<span class="token punctuation">.</span>postTitle<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"date: "</span> <span class="token operator">+</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"tags: "</span> <span class="token operator">+</span> PostConfigSetView<span class="token punctuation">.</span>postTags<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"description: "</span> <span class="token operator">+</span> PostConfigSetView<span class="token punctuation">.</span>postDescrption<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"categories: "</span> <span class="token operator">+</span> PostConfigSetView<span class="token punctuation">.</span>postCategories<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"feature: "</span> <span class="token operator">+</span> PostConfigSetView<span class="token punctuation">.</span>postFeature<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"toc: "</span> <span class="token operator">+</span> PostConfigSetView<span class="token punctuation">.</span>postToc<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> <span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>MainFrame<span class="token punctuation">.</span>mainWorkSpace<span class="token punctuation">,</span> <span class="token string">"文件写入成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MainFrame<span class="token punctuation">.</span>displayArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"文件写入成功！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MainFrame<span class="token punctuation">.</span>displayArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"文章路径："</span> <span class="token operator">+</span> file <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MainFrame<span class="token punctuation">.</span>displayArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"文件夹路径："</span> <span class="token operator">+</span> fileDir <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>部署更新都是直接用的api调用npx hexo的命令，非常简单，不多说了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自己写完图形的话，最大的好处就是集成操作，一个程序，做了所有事情。不然重复的事情其实挺折磨人的。<br>源码已经上传到github上，用了自取哈。</p><p>项目地址：<code>git clone https://github.com/bigzcoder/hexo-.git</code>，欢迎clone ^_^。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/2020/06/26/helloworld/"/>
      <url>/2020/06/26/helloworld/</url>
      
        <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>还在上学，坐标河南，方向有两个。</p><ul><li>考研</li><li>写点代码，提提升自己</li><li>写点文章，抒发感情，并且提高写作水平。</li></ul><a id="more"></a><h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><p>未来主要写两方面的东西</p><ul><li>记录生活</li><li>记录学习</li></ul><blockquote><p>可能未来还记录一些工作</p></blockquote><h2 id="关于梦想"><a href="#关于梦想" class="headerlink" title="关于梦想"></a>关于梦想</h2><p>目前盼望有俩，一是考研，二是好工作。<br>未来的话，希望能实现人生价值，为社会做点贡献，来提高自己的成就感吧。</p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>QQ：<code>840350739</code>，记得备注来自博客哦^_^</p><h2 id="感谢博客主题"><a href="#感谢博客主题" class="headerlink" title="感谢博客主题"></a>感谢博客主题</h2><p>主题传送门 –&gt; <code>https://github.com/blinkfox/hexo-theme-matery</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
